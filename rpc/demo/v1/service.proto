syntax = "proto3";

package demo.v1; // 包名，与目录保持一致

// 服务名，与目录保持一致，原则上只要定义一个 service
service Demo {
    // 服务方法，按需定义
    rpc Hello (Req) returns (Resp);
}

// 入参定义
message Req {
    // 字段定义，如果使用 form 表单传输，则只支持
    // int32, int64, uint32, unint64, double, float, bool, string,
    // 以及对应的 repeated 类型，不支持 map 和 message 类型！
    // 框架会自动解析并转换参数类型
    // 如果用 json 或 protobuf 传输则没有限制
    string message = 1; // 这是行尾注释，业务方一般不要使用
    //int32 age = 2;
    // form 表单格式只能部分支持 repeated 语义
    // 但客户端需要发送英文逗号分割的字符串
    // 如 ids=1,2,3 将会解析为 []int32{1,2,3}
    //repeated int32 ids = 3;
}

message Data {
    string message = 1;
}

// 出参定义,
// 理认上可以输出任意消息
// 但我们的业务要求只能包含 code, msg, data 三个字段，
// 其中 data 需要定义成 message
// 开源版本可以怱略这一约定
message Resp {
    // 业务错误码[机读]，必须大于零
    // 小于零的主站框架在用，注意避让。
    int32 code = 1;
    // 业务错误信息[人读]
    string msg = 2;
    // 业务数据对象
    Data data = 3;
}
